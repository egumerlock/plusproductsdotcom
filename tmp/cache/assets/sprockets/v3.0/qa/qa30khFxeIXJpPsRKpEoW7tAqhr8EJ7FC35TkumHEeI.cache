I"(function() {
  var Tabs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Tabs = (function() {
    function Tabs(el1) {
      this.el = el1;
      this.overflowTabs = bind(this.overflowTabs, this);
      this.$tabList = $(this.el);
      this.$tabs = this.$tabList.find("li:not(.tabs-dropdown)");
      this.tabs = this.$tabs.toArray();
      this.$tabList.append("<li class='tabs-dropdown'><a href='#'></a><ul></ul></li>");
      this.$dropdown = this.$tabList.find(".tabs-dropdown");
      this.setWidths();
      this.initEvents();
    }

    Tabs.prototype.initEvents = function() {
      $(window).on("resize", this.overflowTabs);
      return this.overflowTabs();
    };

    Tabs.prototype.setWidths = function() {
      this.tabWidths = this.tabs.map(function(tab) {
        return tab.offsetWidth;
      });
      return this.totalTabsWidth = this.tabWidths.reduce(function(previousValue, currentValue) {
        return previousValue + currentValue;
      });
    };

    Tabs.prototype.overflowTabs = function() {
      var containerWidth, dropdownActive, widthDifference, widthDifferenceWithDropdown;
      containerWidth = this.$tabList[0].offsetWidth;
      if (!this.lastKnownWidth) {
        this.lastKnownWidth = containerWidth;
      }
      widthDifference = this.totalTabsWidth - containerWidth;
      widthDifferenceWithDropdown = widthDifference + this.dropdownWidth();
      dropdownActive = this.$dropdown.find("li").length;
      if (containerWidth <= this.lastKnownWidth) {
        if ((dropdownActive && widthDifferenceWithDropdown > 0) || (!dropdownActive && widthDifference > 0)) {
          this.hideTabsToFit(widthDifferenceWithDropdown);
        }
      }
      if (containerWidth > this.lastKnownWidth) {
        this.showTabsToFit(widthDifference);
      }
      return this.lastKnownWidth = containerWidth;
    };

    Tabs.prototype.dropdownWidth = function() {
      return this.$dropdown[0].offsetWidth || 50;
    };

    Tabs.prototype.hideTabsToFit = function(widthDifference) {
      var j, len, tab, tabWidth, tabs;
      this.$tabList.addClass("tabs-overflowed");
      tabs = this.tabs.slice().reverse();
      for (j = 0, len = tabs.length; j < len; j++) {
        tab = tabs[j];
        if (widthDifference <= 0) {
          return;
        }
        if ($(tab).hasClass("in-dropdown") || $(tab).hasClass("active")) {
          continue;
        }
        tabWidth = tab.offsetWidth;
        this.totalTabsWidth -= tabWidth;
        widthDifference -= tabWidth;
        $(tab).appendTo(this.$dropdown.find("ul")).addClass("in-dropdown");
      }
    };

    Tabs.prototype.showTabsToFit = function(widthDifference) {
      var i, j, len, ref, tab, tabWidth;
      ref = this.tabs.slice();
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        tab = ref[i];
        if (!$(tab).hasClass("in-dropdown")) {
          continue;
        }
        tabWidth = this.tabWidths[i];
        if (widthDifference + tabWidth > 0) {
          break;
        }
        this.totalTabsWidth += tabWidth;
        widthDifference += tabWidth;
        $(tab).insertBefore(this.$dropdown).removeClass("in-dropdown");
      }
      if (this.$dropdown.find("li").length === 0) {
        return this.$tabList.removeClass("tabs-overflowed");
      }
    };

    return Tabs;

  })();

  window.onload = function() {
    var el, j, len, ref, results;
    ref = $(".tabs");
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      results.push(new Tabs(el));
    }
    return results;
  };

}).call(this);
:ET